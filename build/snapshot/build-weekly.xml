<?xml version="1.0"?>

<!--
	This is an Apache Ant build file for Squirrel SQL Client (Weekly Builds)
	This script's weeekly build target will fetch the latest source from SF
	(either update or fresh checkout), build the application and installer, run
	the installer using the autoconfigure option, then launch the installed 
	application for manual build verification testing. When build testing is 
	complete, manually shutdown the SQuirreL instance launched by this script
	and a src zip archive will be produced from cvs export of SQuirreL.  If the
	manual build verification yields results that indicate that the build has 
	critical issues that need to be resolved, simply type Ctrl-C in the console
	window that is running the build to skip the cvs export and subsequent 
	building of the source zip archive.
-->

<project name="Squirrel-SQL-Client-WeeklyBuild" default="weeklybuild" basedir=".">

	<!-- Suck in the properties from the properties file and setup some props 
	     and directories -->
	<target name="init">
		<property file="${basedir}/build-weekly.properties"/>
		<property name="dist.dir" value="${cvs.dest.dir}/squirrel-sql-dist"/>
		<property name="install.jar.file" 
			      value="${dist.dir}/${name}-${appversion}-install.jar"/>
		<tstamp>
		    <format property="touch.time" 
		    	    pattern="yyyyMMdd_kkmm"
					unit="hour"
		    	    timezone="GMT"
		    />
		</tstamp>
		<!-- 
		We decided to drop the version from the snapshot build. So snapshot builds
		have a date/time stamp in their version. However, if we aren't configured to 
        replace the version file with a template that accepts the snapshot, then use
        the appversion property to set squirrel.version
		-->
        <condition property="squirrel.version" 
        		   value="Snapshot-${touch.time}" 
        	       else = "${appversion}">
        	
            <istrue value="${replace.version}"/>
        
        </condition>

		<property name="install.jar.file.dist" 
		          value="${dist.dir}/${name}-${squirrel.version}-install.jar"/>
		<property name="source.zip.file"
		          value="${dist.dir}/${name}-${squirrel.version}-src.zip"/>

		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}/squirrel-sql"/>
	</target>

	<target name="test" depends="init">
		<echo message="squirrel.version=${squirrel.version}"/>
	</target>
	
	<!-- Creates the squirrel installer using izpack -->
	<target name="createinstaller">
		<echo message="Creating the installer with izpack" />

                <copy file="${cvs.dest.dir}/${project.module}/build/snapshot/${izpack.config.file.template}" 
                      toFile="${cvs.dest.dir}/${project.module}/build/snapshot/${izpack.config.file}">
                        <filterchain>
                                <filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
                                        <param type="token"
                                               name="squirrel.version"
                                               value="${squirrel.version}"/>
                                </filterreader>
                        </filterchain>
                </copy>

		<java jar="${izpack.home.dir}/lib/compiler.jar"
	              fork="true"
	              failonerror="true"
	              maxmemory="128m"
	        >

	            <arg value="-HOME"/>
	            <arg value="${izpack.home.dir}"/>
		    <arg value="${cvs.dest.dir}/${project.module}/build/snapshot/${izpack.config.file}"/>
		    <arg value="-b"/>
		    <arg value="${cvs.dest.dir}/${project.module}/build"/>
		    <arg value="-k"/>
		    <arg value="standard-kunststoff"/>
		    <arg value="-o"/>
		    <arg value="${install.jar.file}"/>

		    <classpath>
		        <pathelement location="${izpack.home.dir}/lib/compiler.jar"/>
		        <pathelement path="${java.class.path}"/>
		    </classpath>
	        </java>					
	</target>
	
	<!-- Creates the autoinstall.xml file from the template file 
	     autoinstall.xml.template -->
	<target name="createinstallscript">
		<echo message="Copying template autoinstall file to ${auto.install.file}"/>		
		<copy file="${auto.intall.template}" toFile="${auto.install.file}">
			<filterchain>
				<filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
					<param type="token" 
						   name="bv.install.dir" 
						   value="${bv.install.dir}"/>
				</filterreader>
			</filterchain>
		</copy>	
	</target>		
	
	<!-- create the source archive for this snapshot -->
	<target name="createsourcearchive" depends="cvsexport">
		 <zip destfile="${source.zip.file}"
		       basedir="${dist.dir}/src"
		       update="true"
		  />	
	</target>
	
	<!-- This deletes the files that are in the cvs.dest.dir/project.module/build
	     directory, then updates the entire source tree, and performs an
	     "ant clean" -->
	<target name="cvsupdate" depends="init" if="targettest">
		<delete includeEmptyDirs="true" quiet="true">
			<fileset dir="${cvs.dest.dir}/${project.module}/build">
				<exclude name="CVS/**/*"/>
			</fileset>
		</delete>		
		<cvs command="update -A  -P -d -r ${cvs.tag}"
		     compressionlevel="3"
			 cvsroot="${project.cvsroot}" 
			 dest="${cvs.dest.dir}" 
			 package="${project.module}"
		/>		
		<ant antfile="${build.file.dest.dir}/build.xml" 
			 target="clean"
			 inheritAll="false"
		     dir="${cvs.dest.dir}/${project.module}"
	    />		
	</target>
	
	<!-- this deletes the files underneath cvs.dest.dir, then checks out the 
	     distribution from the CVS repository -->
	<target name="cvsco" depends="init" if="targettest">
		<delete includeEmptyDirs="true" quiet="true">
			<fileset dir="${cvs.dest.dir}" defaultexcludes="no">
			</fileset>
		</delete>
	    <mkdir dir="${cvs.dest.dir}/${project.module}"/>
		<cvs reallyquiet="true"
		     compressionlevel="3"
			 cvsroot="${project.cvsroot}" 
			 dest="${cvs.dest.dir}" 
			 package="${project.module}"
			 tag="${cvs.tag}"
		/>	
	</target>

	<!-- exports the source (minus the CVS directories) from the repository. -->
	<target name="cvsexport">
		<delete includeEmptyDirs="true" quiet="true">
			<fileset dir="${dist.dir}/src" defaultexcludes="no">
			</fileset>
		</delete>		
		<mkdir dir="${dist.dir}/src"/>
		<cvs command="export -r ${cvs.tag} ${project.module}"
			 reallyquiet="true"
		     compressionlevel="3"
			 cvsroot="${project.cvsroot}" 
			 dest="${dist.dir}/src" 
		/>		
	</target>
	
	<!-- calls out to the squirrel trunk build.xml file in the temp build area
	     to execute a build. -->
	<target name="executebuild">
		<echo message="Executing build file ${build.file.dest.dir}/build.xml target=${build.target}" />
		<ant antfile="${build.file.dest.dir}/build.xml" 
			 target="${build.target}"
			 inheritAll="false"
		     dir="${cvs.dest.dir}/${project.module}"
	    />	
	</target>
	
	<!-- Launches the application for manual build verification testing -->
	<target name="launchsquirrel">
		<exec executable="${launch.file}"/>
	</target>	
		
	<!-- Replaces the Version.java which comes with the trunk, with one that 
	     has the snapshot build number in it. -->
	<target name="replaceversion" if="targettest">

		<echo message="Deleting file ${version.dest.filename}"/>
		<delete file="${version.dest.filename}"/>
		
		<echo message="Copying template version file to ${version.dest.filename}"/>		
		<copy file="${version.template.filename}" toFile="${version.dest.filename}">
			<filterchain>
				<filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
					<param type="token" 
						   name="SNAPSHOT_VERSION" 
						   value="${squirrel.version}"/>
				</filterreader>
			</filterchain>
		</copy>	
	</target>
	
	<!-- Runs the installer, feeding it the autoinstall script -->
	<target name="runinstaller">
		<delete includeEmptyDirs="true" quiet="true">
			<fileset dir="${bv.install.dir}" defaultexcludes="no">
			</fileset>
		</delete>		
		<java jar="${install.jar.file}"
		      fork="true"
			  failonerror="true"
			  maxmemory="128m"
	    >
			<arg value="${auto.install.file}"/>
	    </java>
	</target>	
	
	<!-- 
	  * Allows conditional call of a target based on true/false value of some
	  * property. If propertyvalue is true, then targettocall is called with 
	  * "targettest" property undefined.
	  *
	  * @param propertyvalue the property whose true/false value should 
	  *                      determine whether or not the targettocall should
	  *                      execute.
	  * @param targettocall the target that should be called.  This target 
	  *                     should have if="targettest" to allow it to be 
	  *                     turned on or off based on the true/false value of 
	  *                     targettocall.
	 -->
	<target name="testtrue">
		<condition property="targettest">
			<istrue value="${propertyvalue}"/>
		</condition>
		<antcall target="${targettocall}">
		</antcall>		
	</target>	

	<!-- 
	  * Allows conditional call of a target based on true/false value of some
	  * property. If propertyvalue is false, then targettocall is called with 
	  * "targettest" property undefined.
	  *
	  * @param propertyvalue the property whose true/false value should 
	  *                      determine whether or not the targettocall should
	  *                      execute.
	  * @param targettocall the target that should be called.  This target 
	  *                     should have if="targettest" to allow it to be 
	  *                     turned on or off based on the true/false value of 
	  *                     targettocall.
	 -->	
	<target name="testfalse">
		<condition property="targettest">
			<isfalse value="${propertyvalue}"/>
		</condition>
		<antcall target="${targettocall}">
		</antcall>		
	</target>		
	
	<!-- This does the work of checking out or updating the source, building the
	     distribution and the install jar. -->
	<target name="weeklybuild" depends="init">

		
		<antcall target="testtrue">
			<param name="targettocall" value="cvsco"/>
			<param name="propertyvalue" value="${delete.dest.dir}"/>
		</antcall>	
		
		<antcall target="testfalse">
			<param name="targettocall" value="cvsupdate"/>
			<param name="propertyvalue" value="${delete.dest.dir}"/>
		</antcall>	
		
		<antcall target="testtrue">
			<param name="targettocall" value="replaceversion"/>
			<param name="propertyvalue" value="${replace.version}"/>
		</antcall>			
		
		<antcall target="executebuild"/>
			
		<antcall target="createinstaller"/>
		
		<antcall target="createinstallscript"/>
		
		<antcall target="runinstaller"/>
		
		<antcall target="launchsquirrel"/>
		
		<move file="${install.jar.file}" toFile="${install.jar.file.dist}"/>
		
		<antcall target="createsourcearchive"/>
	</target>
		
</project>
