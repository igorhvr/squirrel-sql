HibernatePrefsTab.title=Hibernate
HibernatePrefsTab.hint=Hibernate configurations


HibernatePanel.config=Configuration
HibernatePanel.newConfig=New
HibernatePanel.FactoryProvider=SessionFactoryImpl provider

HibernatePanel.classPathAdd=Add classpath entry
HibernatePanel.classPathRemove=Remove selected entries

HibernatePanel.ConfiguirationDef=Configuration definition

HibernatePanel.newFactoryClasspathBorder=Classpath entries to create a SessionFactoryImpl
HibernatePanel.configName=Configuration name

HibernateController.classpathEntryDesc=Jars, Zips or directories

FactoryProviderDialog.title=Name of SessionFactorImpl provider

FactoryProviderDialog.desc=Please enter the fully qualified class name of a SessionFactorImpl provider class. The compiled class file must be in one of your additional classpath entries.

FactoryProviderDialog.example=Save example code for a SessionFactorImpl provider class to ...

FactoryProviderController.fileCreated=File {0} has been successfully created.

FactoryProviderController.fileCreateFailed=File {0} could not be created: {1}

FactoryProviderDialog.ok=OK
FactoryProviderDialog.cancel=Cancel


HibernatePanel.removeFactoryProvider=Remove

HibernatePanel.removeConfig=Remove

HibernatePanel.applyConfigChanges=Apply changes to this configuration

HibernatePanel.editFactoryProvider=Edit

HibernateController.noCfgNameMsg=Not a valid configuration name\nChanges cannot be applied.

HibernateController.noProviderMsg=Missing SessionFactoryImplProvider .\nChanges cannot be applied.

HibernateController.ReallyRemoveConfig=Are you sure you want to delete configuration "{0}".
HibernateController.NoConfigToRemove=No configuration selected to remove.

HibernatePanel.toObtainSessionFact=To obtain a Hibernate SessionFactoryImpl instance SQuirreL should:

HibernatePanel.toObtainSessionFactConfiguration=Call "new org.hibernate.cfg.Configuration().configure().buildSessionFactory();"
HibernatePanel.toObtainSessionFactFactoryProvider=Invoke the user defined provider method below:

HibernateController.noPersistenceUnitName=Missing Persitence-Unit name .\nChanges cannot be applied.

HibernatePanel.toObtainSessionFactJPA=Call "javax.persistence.Persistence.createEntityManagerFactory("<persitence-unit name>");"
HibernatePanel.toObtainSessionFactPersUnit=persitence-unit name:

HibernatePanel.moveUp=Move up
HibernatePanel.moveDown=Move down

HibernatePanel.howToAccess=Memory usage: To access Hibernate SQuirreL should:
HibernateConfigPanel.createProcess=Launch a process that runs Hibernate (lower memory usage)
HibernateConfigPanel.createProcessDetails=Details ...
HibernateConfigPanel.inVM=Run Hibernate in SQuirreL's Java VM (higher memory usage)

ProcessDetailsController.missingCommand=Please enter a command.

ProcessDetailsController.noPort=Please enter a command that ends with -port:<port number>. E.g. -port:23366
ProcessDetailsController.invalidPortNumber:Please enter a port that is a valid number.

ProcessDetailsDialog.title=Process details

ProcessDetailsDialog.processDesc=Launching Hibernate in its own process can keep SQuirreL from running out of memory. To launch the process SQuirreL will execute the following command (note the port paramter at the end):

ProcessDetailsDialog.restoreDefault=Restore default

ProcessDetailsDialog.RefreshRealCmnd=Refresh
ProcessDetailsDialog.RefreshRealCmndCopyToClip=Copy to clipboard

ProcessDetailsDialog.endProcessDesc=By default SQuirreL will launch/end the process when a Hibernate configuration is connected/disconnected. You can prevent SQuirreL from ending the process. SQuirreL will then try to attach to this process on connect. If this fails SQuirreL will again launch a process. (Note: This option also allows you to launch the process yourself.)

ProcessDetailsDialog.chkEndProcess=Launch/end process on connect/disconnect

ProcessDetailsDialog.ok=OK
ProcessDetailsDialog.cancel=Cancel



